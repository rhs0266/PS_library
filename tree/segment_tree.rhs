#include <vector>

typedef long long int ll;
struct segment_tree { // Lazy Propagation
private:
    int N;
    std::vector<ll> tree;
    std::vector<ll> accum_tree;
    ll update(int x, int L, int R, int range_L, int range_R, ll cnt, ll f(ll, ll)) {
        // L, R : current node's rane
        // range_L, range_R : target range
        if (L > range_R || R < range_L) return DEFAULT;
        if (L > R || range_L > range_R) return DEFAULT;
        if (range_L <= L && R <= range_R) {
            tree[x] = f(tree[x], cnt);
            accum_tree[x] = f(accum_tree[x], cnt * (R - L + 1));
            return cnt*(R-L+1);
        }
        int mid = (L + R) / 2;
        ll left_v = update(x * 2, L, mid, range_L, range_R, cnt, f);
        ll right_v = update(x * 2 + 1, mid + 1, R, range_L, range_R, cnt, f);
 
        // For accumulate
            accum_tree[x] = f(accum_tree[x], left_v);
            accum_tree[x] = f(accum_tree[x], right_v);
        return f(left_v, right_v);
    }
    ll find_single(int x, int L, int R, int X, ll f(ll, ll)) {
        // L, R : current node's rane
        // range_L, range_R : target range
        if (L > X || R < X) return DEFAULT;
        if (L > R) return DEFAULT;
        if (L == R) return tree[x];
        int mid = (L + R) / 2;
        return f(tree[x], f(find_single(x * 2, L, mid, X, f), find_single(x * 2 + 1, mid + 1, R, X, f)));
    }
    ll find_range(int x, int L, int R, int range_L, int range_R, ll f(ll, ll), ll accum) {
        if (L > range_R || R < range_L) return DEFAULT;
        if (L > R || range_L > range_R) return DEFAULT;
        if (range_L <= L && R <= range_R) {
            return accum_tree[x] + accum * (R-L+1);
        }
        int mid = (L + R) / 2;
        ll left_v = find_range(x * 2, L, mid, range_L, range_R, f, accum + tree[x]);
        ll right_v = find_range(x * 2+1, mid+1,R, range_L, range_R, f, accum + tree[x]);
        return f(left_v, right_v);
    }
 
public:
    ll DEFAULT;
    segment_tree(int size, ll DEF) {
        N = size;
        tree.resize(N * 4);
        accum_tree.resize(N * 4);
        DEFAULT = DEF;
        FOR(i, 1, N * 4 - 1) tree[i] = accum_tree[i] = DEFAULT;
    }
    void update(int L, int R, ll cnt, ll f(ll, ll)) { update(1, 1, N, L, R, cnt, f); }
    ll find_single(int X, ll f(ll, ll)) { return find_single(1, 1, N, X, f); }
    ll find_range(int L, int R, ll f(ll, ll)) { return find_range(1, 1, N, L, R, f, DEFAULT); }
};
